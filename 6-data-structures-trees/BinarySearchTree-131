using System;


namespace Trees
{
  public class BinarySearchTrees
  {
    public BinarySearchTrees()
    {
      BinarySearchTree tree = new BinarySearchTree();
      //         9
      //    4        20
      // 1     6  15   170
      tree.Insert(9);
      tree.Insert(4);
      tree.Insert(6);
      tree.Insert(20);
      tree.Insert(170);
      tree.Insert(15);
      tree.Insert(1);

      PrintTree(tree);

      Console.WriteLine(tree.LookUp(15));
    }

    
    public void PrintTree(BinarySearchTree tree)
    {
      print2DUtil(tree.root, 0);
    }

    // Print Tree Horizontally (from anirban-s)
    int COUNT = 5;
    private void print2DUtil(Node root, int space)
    {
      // Base case  
      if (root == null)
          return;

      // Increase distance between levels  
      space += COUNT;

      // Process right child first  
      print2DUtil(root.right, space);

      // Print current node after space  
      // count  
      Console.Write("\n");
      for (int i = COUNT; i < space; i++)
      {
        Console.Write(" ");
      }
      Console.Write(root.value + "\n");

      // Process left child  
      print2DUtil(root.left, space);
    }
  }
  
  public class BinarySearchTree
  {
    public Node root { get; set; }
    
    public BinarySearchTree()
    {
      this.root = null;
    }

    public void Insert(object value)
    {
      Node node = new Node(value);
      if (this.root == null)
      {
        this.root = node;
        return;
      }
      else
      {
        Node currentNode = this.root;
        while(true)
        {
          if(Convert.ToInt32(value) < Convert.ToInt32(currentNode.value))
          {
            // Left
            if(currentNode.left == null)
            {
              currentNode.left = node;
              return;
            }
            currentNode = currentNode.left;
          }
          else
          {
            // Right
            if(currentNode.right == null)
            {
              currentNode.right = node;
              return;
            }
            currentNode = currentNode.right;
          }
        }
      }
    }

    public string LookUp(object value)
    {
      if(this.root == null)
      {
        return "null";
      }

      Node currentNode = this.root;
      while(currentNode != null)
      { 
        if(Convert.ToInt32(value) < Convert.ToInt32(currentNode.value))
        {
          // left
          currentNode = currentNode.left;
        }
        else if(Convert.ToInt32(value) > Convert.ToInt32(currentNode.value))
        {
          // right
          currentNode = currentNode.right;
        }
        else if(Convert.ToInt32(value) == Convert.ToInt32(currentNode.value))
        {
          return "found! : " + Convert.ToString(value);
        }
      }
      return "false";
    }
  }
  
  public class Node 
  {
    public Node left { get; set; }
    public Node right { get; set; }
    public object value { get; set; }

    public Node(object value)
    {
      this.left = null;
      this.right = null;
      this.value = value;
    }
  }
}